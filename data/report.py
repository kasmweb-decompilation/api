# decompyle3 version 3.9.1
# Python bytecode version base 3.8.0 (3413)
# Decompiled from: Python 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
# Embedded file name: data/report.py


class Report(object):
    reports = {'logins_by_hour':{'description':"", 
      'report_type':"timeseries", 
      'query':"\n\t\t\t\tSELECT\n\t\t\t\t  failed_login,\n\t\t\t\t  success_login,\n\t\t\t\t  RPAD(y.timeslot, 12, '0')::char(12) AS _time\n\t\t\t\tFROM\n\t\t\t\t(\n\t\t\t\t  SELECT\n\t\t\t\t\t  SUM(x.failed_login) as failed_login,\n\t\t\t\t\t  SUM(x.success_login) as success_login,\n\t\t\t\t\t  CASE\n\t\t\t\t\t\t  WHEN $resolution = 1 THEN substring(log_minute, 0, 13)\n\t\t\t\t\t\t  WHEN $resolution = 10 THEN SUBSTRING(log_minute, 0, 12)\n\t\t\t\t\t\t  WHEN $resolution = 60 THEN SUBSTRING(log_minute, 0, 11)\n\t\t\t\t\t\t  WHEN $resolution = 1440 THEN SUBSTRING(log_minute, 0, 9)\n\t\t\t\t\t\t  ELSE SUBSTRING(log_minute, 0, 11) --default 1 hour resolution\n\t\t\t\t\t  END AS timeslot\n\t\t\t\t  FROM\n\t\t\t\t  (\n\t\t\t\t\t  select\n\t\t\t\t\t\tCASE WHEN (\n\t\t\t\t\t\t\t\tmetric_name = 'account.login.failed_invalid_password' OR\n\t\t\t\t\t\t\t\tmetric_name = 'account.login.failed_invalid_user' OR\n\t\t\t\t\t\t\t\tmetric_name = 'account.login.failed_locked' OR\n\t\t\t\t\t\t\t\tmetric_name = 'account.login.failed_email_not_verified' OR\n\t\t\t\t\t\t\t\tmetric_name = 'account.login.failed_ldap_error' OR\n\t\t\t\t\t\t\t\tmetric_name = 'account.login.failed_saml_only'\n\t\t\t\t\t\t\t\t   ) THEN 1 ELSE 0 END AS failed_login,\n\t\t\t\t\t\tCASE WHEN (\n\t\t\t\t\t\t\t\tmetric_name = 'account.login.successful'\n\t\t\t\t\t\t\t\t) THEN 1 ELSE 0 END AS success_login,\t\t\t                \n\t\t\t\t\t\tto_char(logs.ingest_date, 'YYYYMMDDHH24MI'::text) as log_minute\n\t\t\t\t\t  from logs\n\t\t\t\t\t  WHERE \t\t\t               \n\t\t\t\t\t\tingest_date < to_timestamp('$end_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t\t\t\tingest_date > to_timestamp('$start_date', 'YYYYMMDD HH24:MI') \n\t\t\t\t\t  ORDER BY ingest_date DESC\n\t\t\t\t  ) AS x\n\t\t\t\t  GROUP BY\n\t\t\t\t\t  timeslot\n\t\t\t\t) AS y\n\t\t\t\tORDER BY _time;\n    \t\t"}, 
     'active_users':{'description':"View the number of active users in time series", 
      'report_type':"timeseries", 
      'query':"\n\t\t\t\tSELECT\n\t\t\t\t\tCOUNT(users) as users,\n\t\t\t\t\t_time\n\t\t\t\tFROM\n\t\t\t\t(\n\t\t\t\t\tSELECT\n\t\t\t\t\t  users,\n\t\t\t\t\t  RPAD(y.timeslot, 12, '0')::char(12) AS _time\n\t\t\t\t\tFROM\n\t\t\t\t\t(\n\t\t\t\t\t  SELECT\n\t\t\t\t\t\t  x.user as users,\n\t\t\t\t\t\t  CASE\n\t\t\t\t\t\t\t  WHEN $resolution = 1 THEN substring(log_minute, 0, 12)\n\t\t\t\t\t\t\t  WHEN $resolution = 10 THEN SUBSTRING(log_minute, 0, 12) \n\t\t\t\t\t\t\t  WHEN $resolution = 60 THEN SUBSTRING(log_minute, 0, 11)\n\t\t\t\t\t\t\t  WHEN $resolution = 1440 THEN SUBSTRING(log_minute, 0, 9)\n\t\t\t\t\t\t\t  ELSE SUBSTRING(log_minute, 0, 11) --default 1 hour resolution\n\t\t\t\t\t\t  END AS timeslot\n\t\t\t\t\t  FROM\n\t\t\t\t\t  (\t  \n\t\t\t\t\t\t  SELECT\t\n\t\t\t\t\t\t\tkasm_user_name AS user,\n\t\t\t\t\t\t\tto_char(logs.ingest_date, 'YYYYMMDDHH24MI'::text) as log_minute\n\t\t\t\t\t\t  FROM \n\t\t\t\t\t\t\tlogs\n\t\t\t\t\t\t  WHERE \t\n                                                        kasm_user_name is not null AND\t\t               \n\t\t\t\t\t\t\tingest_date < to_timestamp('$end_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t\t\t\t\tingest_date > to_timestamp('$start_date', 'YYYYMMDD HH24:MI')  \n\t\t\t\t\t\t  ORDER BY ingest_date DESC\n\t\t\t\t\t  ) AS x\n\t\t\t\t\t  GROUP BY\n\t\t\t\t\t\t  timeslot, x.user\n\t\t\t\t\t) AS y\n\t\t\t\t\tORDER BY _time\n\t\t\t\t) AS s\n\t\t\t\tGROUP BY\n\t\t\t\t\t_time;\n    \t\t"}, 
     'current_users':{'description':"View the number of current users", 
      'report_type':"scalar", 
      'query':"\n\t\t\t\tSELECT \n\t\t\t\t\tCOUNT(DISTINCT(kasm_user_name)) as users\n\t\t\t\tFROM logs\n\t\t\t\tWHERE\n\t\t\t\t  kasm_user_name IS NOT NULL AND\n\t\t\t\t  ingest_date < CURRENT_TIMESTAMP AND\n\t\t\t\t  ingest_date > CURRENT_TIMESTAMP - (5 * interval '1 minute')\n\t\t\t\t\t\t\t"}, 
     'agent_resource_utilization':{'description':"View the resource utilization on a Kasm Agent", 
      'report_type':"timeseries", 
      'query':"\n\t\t\t      SELECT\n                                  ROUND(avg_disk_percent, 2) AS avg_disk_percent,\n\t\t\t          ROUND(avg_memory_percent, 2) AS avg_memory_percent,\n\t\t\t          ROUND(max_memory_percent, 2) AS max_memory_percent,\n\t\t\t          ROUND(avg_cpu_percent, 2) AS avg_cpu_percent,\n\t\t\t          ROUND(max_cpu_percent, 2) AS max_cpu_percent,\n\t\t\t          ROUND(avg_gpu_percent, 2) AS avg_gpu_percent,\n\t\t\t          ROUND(max_gpu_percent, 2) AS max_gpu_percent,\n\t\t\t          ROUND(avg_gpu_temp, 2) AS avg_gpu_temp,\n\t\t\t          ROUND(max_gpu_temp, 2) AS max_gpu_temp,\n\t\t\t          ROUND(avg_gpu_memory_percent, 2) AS avg_gpu_memory_percent,\n\t\t\t          ROUND(max_gpu_memory_percent, 2) AS max_gpu_memory_percent,\n\t\t\t          RPAD(y.timeslot, 12, '0')::char(12) AS _time\n\t\t\t      FROM\n\t\t\t      (\n\t\t\t          SELECT\n\t\t\t              AVG(disk_percent) AS avg_disk_percent,\n\t\t\t              AVG(memory_percent) AS avg_memory_percent,\n\t\t\t              MAX(memory_percent) AS max_memory_percent,\n\t\t\t              AVG(cpu_percent) AS avg_cpu_percent,\n\t\t\t              MAX(cpu_percent) AS max_cpu_percent,\n                          AVG(gpu_percent * 100) AS avg_gpu_percent,\n\t\t\t              MAX(gpu_percent * 100) AS max_gpu_percent,\n\t\t\t              AVG(gpu_temp) AS avg_gpu_temp,\n\t\t\t              MAX(gpu_temp) AS max_gpu_temp,\n\t\t\t              AVG(gpu_memory) AS avg_gpu_memory_percent,\n\t\t\t              MAX(gpu_memory) AS max_gpu_memory_percent,\n\t\t\t              CASE\n\t\t\t                  WHEN $resolution = 1 THEN substring(log_minute, 0, 13)\n\t\t\t                  WHEN $resolution = 10 THEN SUBSTRING(log_minute, 0, 12)\n\t\t\t                  WHEN $resolution = 60 THEN SUBSTRING(log_minute, 0, 11)\n\t\t\t                  WHEN $resolution = 1440 THEN SUBSTRING(log_minute, 0, 9)\n\t\t\t                  ELSE SUBSTRING(log_minute, 0, 11) --default 1 hour resolution\n\t\t\t              END AS timeslot\n\t\t\t          FROM\n\t\t\t          (\n\t\t\t              select\n\t\t\t                  coalesce(disk_stats, 0) AS disk_percent,\n\t\t\t                  coalesce(memory_stats, 0) AS memory_percent,\n\t\t\t                  coalesce(cpu_percent, 0) AS cpu_percent,\n                                          coalesce(gpu_percent, 0) AS gpu_percent,\n\t\t\t                  coalesce(gpu_temp, 0) AS gpu_temp,\n\t\t\t                  coalesce(gpu_memory, 0) AS gpu_memory,\n\t\t\t                  to_char(logs.ingest_date, 'YYYYMMDDHH24MI'::text) as log_minute\n\t\t\t              from logs\n\t\t\t              WHERE \n\t\t\t                  metric_name = 'manager.heartbeat.processing' AND\n\t\t\t                  ingest_date < to_timestamp('$end_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t                  ingest_date > to_timestamp('$start_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t                  server_id = uuid('$server_id')::text\n\t\t\t              ORDER BY ingest_date DESC\n\t\t\t          ) AS x\n\t\t\t          GROUP BY\n\t\t\t              timeslot\n\t\t\t      ) AS y\n\t\t\t      ORDER BY _time\n    \t\t"}, 
     'total_users':{'description':"Get the number of users", 
      'report_type':"scalar", 
      'query':"\n\t\t\t\tSELECT Count(*) FROM users\n    \t\t"}, 
     'logs':{'description':"Get logs", 
      'report_type':"table", 
      'query':"\n\t\t\t\t\n    \t\t"}, 
     'get_errors':{'description':"Count of all errors reported", 
      'report_type':"scalar", 
      'query':"\n\t\t\t\tSELECT count(*) as errors\n\t\t\t\tFROM logs\n\t\t\t\tWHERE\n\t\t\t\tingest_date < to_timestamp('$end_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t\tingest_date > to_timestamp('$start_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t\tlevelname = 'ERROR'\n    \t\t"}, 
     'created_kasms':{'description':"Number of Created Kasms for a time period", 
      'report_type':"scalar", 
      'query':"\n\t\t\t\tSELECT Count(*)\n\t\t\t\tFROM logs\n\t\t\t\tWHERE\n\t\t\t\t\tmetric_name  =  'provision.create' AND\n\t\t\t\t\tingest_date < to_timestamp('$end_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t\t  ingest_date > to_timestamp('$start_date', 'YYYYMMDD HH24:MI')\n    \t\t"}, 
     'current_kasms':{'description':"Number of Current Kasms", 
      'report_type':"scalar", 
      'query':"\n\t\t\t\tSELECT count(*) as current_kasms FROM kasms;\n    \t\t"}, 
     'kasms':{'description':"Number of Created Kasms for a time period", 
      'report_type':"timeseries", 
      'query':"\n\t\t\t\tSELECT\n\t\t\t\t  kasms,\n\t\t\t\t  RPAD(y.timeslot, 12, '0')::char(12) AS _time\n\t\t\t\tFROM\n\t\t\t\t(\n\t\t\t\t  SELECT\n\t\t\t\t\t  SUM(x.kasm) as kasms,\n\t\t\t\t\t  CASE\n\t\t\t\t\t\t  WHEN $resolution = 1 THEN substring(log_minute, 0, 13)\n\t\t\t\t\t\t  WHEN $resolution = 10 THEN SUBSTRING(log_minute, 0, 12)\n\t\t\t\t\t\t  WHEN $resolution = 60 THEN SUBSTRING(log_minute, 0, 11)\n\t\t\t\t\t\t  WHEN $resolution = 1440 THEN SUBSTRING(log_minute, 0, 9)\n\t\t\t\t\t\t  ELSE SUBSTRING(log_minute, 0, 11) --default 1 hour resolution\n\t\t\t\t\t  END AS timeslot\n\t\t\t\t  FROM\n\t\t\t\t  (\n\t\t\t\t\t  select\n\t\t\t\t\t\tCASE WHEN (\n\t\t\t\t\t\t\t\tmetric_name = 'provision.create'\n\t\t\t\t\t\t\t\t   ) THEN 1 ELSE 0 END AS kasm,\t                \n\t\t\t\t\t\tto_char(logs.ingest_date, 'YYYYMMDDHH24MI'::text) as log_minute\n\t\t\t\t\t  from logs\n\t\t\t\t\t  WHERE \t\t\t               \n\t\t\t\t\t\tingest_date < to_timestamp('$end_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t\t\t\tingest_date > to_timestamp('$start_date', 'YYYYMMDD HH24:MI') \n\t\t\t\t\t  ORDER BY ingest_date DESC\n\t\t\t\t  ) AS x\n\t\t\t\t  GROUP BY\n\t\t\t\t\t  timeslot\n\t\t\t\t) AS y\n\t\t\t\tORDER BY _time;\n    \t\t"}, 
     'destroyed_kasms':{'description':"Number of destroyed kasms for a given time period", 
      'report_type':"scalar", 
      'query':"\n\t\t\t\tSELECT count(*) as destroyed_kasms\n\t\t      \tFROM logs\n\t\t      \tWHERE\n\t\t\t      \tingest_date < to_timestamp('$end_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t      \tingest_date > to_timestamp('$start_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t      \tmetric_name = 'provision.destroy'\n    \t\t"}, 
     'avg_kasm_length':{'description':"Counts the average length of Kasm sessions", 
      'report_type':"scalar", 
      'query':"\n\t\t      \tSELECT AVG(CAST(data->>'uptime' AS REAL)) AS kasm_length\n\t\t      \tFROM logs\n\t\t      \tWHERE\n\t\t      \t\tingest_date < to_timestamp('$end_date', 'YYYYMMDD HH24:MI') AND\n\t\t                ingest_date > to_timestamp('$start_date', 'YYYYMMDD HH24:MI') AND\n\t\t      \t\tmetric_name  =  'provision.destroy'\n    \t\t"}, 
     'image_usage':{'description':"Table of image names and times provisioned", 
      'report_type':"table", 
      'query':"\n\t\t\t\tSELECT\n\t\t\t\t\tz.count,\n\t\t\t\t\ty.friendly_name,\n\t\t\t\t\ty.image_src\n\t\t\t\tFROM \n\t\t\t\t(\n\t\t\t\t\tSELECT \n\t\t\t\t\t\timage_src, \n\t\t\t\t\t\tfriendly_name\n\t\t\t\t\tFROM \n\t\t\t\t\t\timages\n\t\t\t\t)\tas y\n\t\t\t\tLEFT OUTER JOIN \t\n\t\t\t\t(\n\t\t\t\t\tSELECT \n\t\t\t\t\t\tCount(*), \n\t\t\t\t\t\timage_friendly_name AS image\n\t\t\t\t\tFROM accounting\n\t\t\t\t\tWHERE\n\t\t\t\t\t\tdestroyed_date < to_timestamp('$end_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t\t\t\tcreated_date > to_timestamp('$start_date', 'YYYYMMDD HH24:MI')\n\t\t\t\t\t\tGROUP BY image\n\t\t\t\t) as z on y.friendly_name = z.image;\n    \t\t"}, 
     'user_kasm_usage':{'description':"", 
      'report_type':"table", 
      'query':"\n\t\t\t\t\tWITH session_durations AS (\n\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\tuser_name as name,\n\t\t\t\t\t\t\tEXTRACT(EPOCH FROM (COALESCE(destroyed_date, NOW()) - start_date)) AS total_session_duration\n\t\t\t\t\t\tFROM accounting\n\t\t\t\t\t\tWHERE start_date > to_timestamp('$start_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t\t\t\tCOALESCE(destroyed_date, to_timestamp(0)) <= to_timestamp('$end_date', 'YYYYMMDD HH24:MI')\n\t\t\t\t\t)\n\t\t\t\t\tSELECT\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tAVG(total_session_duration) AS avg_kasm_length,\n\t\t\t\t\t\tSUM(total_session_duration) AS kasm_length,\n\t\t\t\t\t\tMAX(total_session_duration) AS longest_session,\n\t\t\t\t\t\tMIN(total_session_duration) AS shortest_session\n\t\t\t\t\tFROM session_durations\n\t\t\t\t\tGROUP BY name;\n    \t\t"}, 
     'domain_usage':{'description':"", 
      'report_type':"table", 
      'query':"\n\n\t\t\t\t\tSELECT\n\t\t\t\t\t\tx.domain as domain,\n\t\t\t\t\t\tx.requests as requests,\n\t\t\t\t\t\tx.allowed as allowed,\n\t\t\t\t\t\tx.denied as denied,\n\t\t\t\t\t\tto_json(categories) as categories\n\t\t\t\t\t\n\t\t\t\t\t FROM\n\t\t\t\t\t (\n\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t   y.domain as domain,\n\t\t\t\t\t\t   count(y.domain) as requests,\n\t\t\t\t\t\t   sum(y.allowed) allowed,\n\t\t\t\t\t\t   sum(y.denied) denied\n\t\t\t\t\t\tFROM\n\t\t\t\t\t\t   (\n\t\t\t\t\t\t\t  SELECT\n\t\t\t\t\t\t\t\t data ->> 'domain' AS domain,\n\t\t\t\t\t\t\t\t CASE\n\t\t\t\t\t\t\t\t\tWHEN\n\t\t\t\t\t\t\t\t\t   CAST(data ->> 'allow' as bool) = true \n\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t   1 \n\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t   0 \n\t\t\t\t\t\t\t\t END\n\t\t\t\t\t\t\t\t as allowed,\n\t\t\t\t\t\t\t\t  CASE\n\t\t\t\t\t\t\t\t\tWHEN\n\t\t\t\t\t\t\t\t\t   CAST(data ->> 'allow' as bool) = false \n\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t   1 \n\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t   0 \n\t\t\t\t\t\t\t\t END\n\t\t\t\t\t\t\t\t as denied\n\t\t\t\t\t\t\t  FROM\n\t\t\t\t\t\t\t\t logs \n\t\t\t\t\t\t\t  WHERE\n\t\t\t\t\t\t\t\t metric_name = 'url_access' AND\n\t\t\t\t\t\t\t\t ingest_date < to_timestamp('$end_date', 'YYYYMMDD HH24:MI') AND\n\t\t\t\t\t\t\t\t ingest_date > to_timestamp('$start_date', 'YYYYMMDD HH24:MI')\n\t\t\t\t\t\t   )\n\t\t\t\t\t\t   as y \n\t\t\t\t\t\tGROUP by\n\t\t\t\t\t\t   y.domain\n\t\t\t\t\t) as x\n\t\t\t\t\tleft join domains on x.domain = domains.domain_name\n\t    \t\t"}}

    def __init__(self, name, description, report_type, query):
        self.name = name
        self.description = description
        self.report_type = report_type
        self.query = query

    def get_report(name):
        if name not in Report.reports:
            raise ValueError("Invalid report name")
        r_d = Report.reports[name]
        r = Report(name, r_d["description"], r_d["report_type"], r_d["query"])
        return r

# okay decompiling bytecode/data/report.pyc
